{"map":"{\"version\":3,\"sources\":[\"/Users/joshuabrown/Documents/Code/timezone-chrome-extension/timezone-ext/node_modules/file-loader/dist/cjs.js??ref--6-oneOf-7!/Users/joshuabrown/Documents/Code/timezone-chrome-extension/timezone-ext/src/logo.svg\",\"/Users/joshuabrown/Documents/Code/timezone-chrome-extension/timezone-ext/src/App.js\",\"/Users/joshuabrown/Documents/Code/timezone-chrome-extension/timezone-ext/src/serviceWorker.js\",\"/Users/joshuabrown/Documents/Code/timezone-chrome-extension/timezone-ext/src/index.js\"],\"names\":[\"module\",\"exports\",\"__webpack_require__\",\"p\",\"App\",\"firstSundayDSTOn\",\"today\",\"Date\",\"year\",\"getFullYear\",\"i\",\"getDay\",\"firstSundayDSTOff\",\"daylightSavingDate\",\"easternHours\",\"daylightTime\",\"daylightSavingEndDate\",\"getTime\",\"getUTCHours\",\"currentTimeEastern\",\"centralHours\",\"easternMinutes\",\"getUTCMinutes\",\"concat\",\"currentTimeCentral\",\"pacificHours\",\"centralMinutes\",\"currentTimePacific\",\"pacificMinutes\",\"react_default\",\"a\",\"createElement\",\"className\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"oIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6ICgIzBC,IAAAA,EA5Hf,WAOE,IALA,IAIIC,EAJAC,EAAQ,IAAIC,KACZC,GAAO,IAAID,MAAOE,cAIdC,EAAI,EAAGA,EAAI,EAAGA,IAET,IADD,IAAIH,KAAKC,EAHC,EAGsBE,GAAGC,WAE3CN,EAAmBK,GAUvB,IANA,IAKIE,EALAC,EAAqB,IAAIN,KAAKC,EATZ,EAQFH,EAAmB,GAO/BK,EAAI,EAAGA,EAAI,EAAGA,IAET,IADD,IAAIH,KAAKC,EAhBC,EAgBsBE,GAAGC,WAE3CC,EAAoBF,GAGxB,IAGII,EACAC,EAJAC,EAAwB,IAAIT,KAAKC,EARd,GAQsCI,IAM3DE,EADCR,EAAMW,UAAYJ,EAAmBI,WAAaX,EAAMW,UAAYD,EAAsBC,UAC5EX,EAAMY,cAAc,EAEpBZ,EAAMY,cAAc,GAGnB,IAChBJ,GAAgB,IAElB,IAIIK,EAWAC,EAfAC,EAAiBf,EAAMgB,gBACxBD,EAAiB,KAClBA,EAAc,IAAAE,OAAOF,IAIrBF,EADEL,EAAe,GACC,YAAAS,OAAeR,EAAe,IAAM,IAApC,MAAAQ,OAA4CT,EAAa,GAAzD,KAAAS,OAA+DF,EAA/D,OACO,IAAjBP,EACU,YAAAS,OAAeR,EAAe,IAAM,IAApC,SAAAQ,OAA+CF,EAA/C,OAEA,YAAAE,OAAeR,EAAe,IAAM,IAApC,MAAAQ,OAA4CT,EAA5C,KAAAS,OAA4DF,EAA5D,QAOlBD,EADCd,EAAMW,UAAYJ,EAAmBI,WAAaX,EAAMW,UAAYD,EAAsBC,UAC5EX,EAAMY,cAAc,EAEpBZ,EAAMY,cAAc,GAGnB,IAChBE,GAAgB,IAElB,IAIII,EAWAC,EAfAC,EAAiBpB,EAAMgB,gBACxBI,EAAiB,KAClBA,EAAc,IAAAH,OAAOG,IAIrBF,EADEJ,EAAe,GACC,YAAAG,OAAeR,EAAe,IAAM,IAApC,MAAAQ,OAA4CH,EAAa,GAAzD,KAAAG,OAA+DG,EAA/D,OACO,IAAjBN,EACU,YAAAG,OAAeR,EAAe,IAAM,IAApC,SAAAQ,OAA+CG,EAA/C,OAEA,YAAAH,OAAeR,EAAe,IAAM,IAApC,MAAAQ,OAA4CH,EAA5C,KAAAG,OAA4DG,EAA5D,OAMjBpB,EAAMW,UAAYJ,EAAmBI,WAAaX,EAAMW,UAAYD,EAAsBC,WAC3FQ,EAAenB,EAAMY,cAAc,EACnCH,GAAe,IAEfU,EAAenB,EAAMY,cAAc,EACnCH,GAAe,GAGdU,EAAe,IAChBA,GAAgB,IAElB,IAIIE,EAJAC,EAAiBtB,EAAMgB,gBAe3B,OAdGM,EAAiB,KAClBA,EAAc,IAAAL,OAAOK,IAIrBD,EADEF,EAAe,GACC,YAAAF,OAAeR,EAAe,IAAM,IAApC,MAAAQ,OAA4CE,EAAa,GAAzD,KAAAF,OAA+DK,EAA/D,OACO,IAAjBH,EACU,YAAAF,OAAeR,EAAe,IAAM,IAApC,SAAAQ,OAA+CK,EAA/C,OAEA,YAAAL,OAAeR,EAAe,IAAM,IAApC,MAAAQ,OAA4CE,EAA5C,KAAAF,OAA4DK,EAA5D,OAMlBC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAA,CAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,IAAA,KACGZ,GAEHU,EAAAC,EAAAC,cAAA,IAAA,KACGP,GAEHK,EAAAC,EAAAC,cAAA,IAAA,KACGJ,MC7GSM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"module.exports = __webpack_public_path__ + \\\"static/media/logo.5d5d9eef.svg\\\";\",\"import React from 'react';\\nimport logo from './logo.svg';\\nimport './App.css';\\n\\nfunction App() {\\n\\n  let today = new Date();\\n  let year = new Date().getFullYear();\\n  //second sunday in march\\n  let daylightOnMonth = 2;\\n  let firstSundayDSTOn, secondSundayDSTOn;\\n  for(let i = 1; i < 8; i++){\\n    var day = new Date(year, daylightOnMonth, i).getDay();\\n    if(day === 0) {\\n      firstSundayDSTOn = i;\\n    }\\n  }\\n  secondSundayDSTOn = firstSundayDSTOn + 7;\\n  let daylightSavingDate = new Date(year, daylightOnMonth, secondSundayDSTOn);\\n\\n\\n  //first sunday in november\\n  let daylightOffMonth = 10;\\n  let firstSundayDSTOff;\\n  for(let i = 1; i < 8; i++){\\n    var day = new Date(year, daylightOnMonth, i).getDay();\\n    if(day === 0) {\\n      firstSundayDSTOff = i;\\n    }\\n  }\\n  let daylightSavingEndDate = new Date(year, daylightOffMonth, firstSundayDSTOff);\\n\\n\\n  let easternHours;\\n  let daylightTime;\\n  if(today.getTime() > daylightSavingDate.getTime() && today.getTime() < daylightSavingEndDate.getTime()){\\n    easternHours = today.getUTCHours()-4;\\n  } else {\\n    easternHours = today.getUTCHours()-5;\\n  }\\n\\n  if(easternHours < 0){\\n    easternHours += 24;\\n  }\\n  let easternMinutes = today.getUTCMinutes();\\n  if(easternMinutes < 10){\\n    easternMinutes = `0${easternMinutes}`;\\n  }\\n  let currentTimeEastern;\\n  if (easternHours > 12) {\\n    currentTimeEastern = `Current E${daylightTime ? 'D' : 'S'}T ${easternHours-12}:${easternMinutes} PM`;\\n  } else if(easternHours === 0){\\n    currentTimeEastern = `Current E${daylightTime ? 'D' : 'S'}T 12:${easternMinutes} AM`;\\n  } else {\\n    currentTimeEastern = `Current E${daylightTime ? 'D' : 'S'}T ${easternHours}:${easternMinutes} AM`;\\n  }\\n\\n\\n\\n  let centralHours;\\n  if(today.getTime() > daylightSavingDate.getTime() && today.getTime() < daylightSavingEndDate.getTime()){\\n    centralHours = today.getUTCHours()-5;\\n  } else {\\n    centralHours = today.getUTCHours()-6;\\n  }\\n\\n  if(centralHours < 0){\\n    centralHours += 24;\\n  }\\n  let centralMinutes = today.getUTCMinutes();\\n  if(centralMinutes < 10){\\n    centralMinutes = `0${centralMinutes}`;\\n  }\\n  let currentTimeCentral;\\n  if (centralHours > 12) {\\n    currentTimeCentral = `Current C${daylightTime ? 'D' : 'S'}T ${centralHours-12}:${centralMinutes} PM`;\\n  } else if(centralHours === 0){\\n    currentTimeCentral = `Current C${daylightTime ? 'D' : 'S'}T 12:${centralMinutes} AM`;\\n  } else {\\n    currentTimeCentral = `Current C${daylightTime ? 'D' : 'S'}T ${centralHours}:${centralMinutes} AM`;\\n  }\\n\\n\\n\\n  let pacificHours;\\n  if(today.getTime() > daylightSavingDate.getTime() && today.getTime() < daylightSavingEndDate.getTime()){\\n    pacificHours = today.getUTCHours()-7;\\n    daylightTime = true;\\n  } else {\\n    pacificHours = today.getUTCHours()-8;\\n    daylightTime = false;\\n  }\\n\\n  if(pacificHours < 0){\\n    pacificHours += 24;\\n  }\\n  let pacificMinutes = today.getUTCMinutes();\\n  if(pacificMinutes < 10){\\n    pacificMinutes = `0${pacificMinutes}`;\\n  }\\n  let currentTimePacific;\\n  if (pacificHours > 12) {\\n    currentTimePacific = `Current P${daylightTime ? 'D' : 'S'}T ${pacificHours-12}:${pacificMinutes} PM`;\\n  } else if(pacificHours === 0){\\n    currentTimePacific = `Current P${daylightTime ? 'D' : 'S'}T 12:${pacificMinutes} AM`;\\n  } else {\\n    currentTimePacific = `Current P${daylightTime ? 'D' : 'S'}T ${pacificHours}:${pacificMinutes} AM`;\\n  }\\n\\n\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      <header className=\\\"App-header\\\">\\n        <p>\\n          {currentTimeEastern}\\n        </p>\\n        <p>\\n          {currentTimeCentral}\\n        </p>\\n        <p>\\n          {currentTimePacific}\\n        </p>\\n      </header>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,function(e,t,n){e.exports=n(12)},,,,,,function(e,t,n){},function(e,t,n){e.exports=n.p+\"static/media/logo.5d5d9eef.svg\"},function(e,t,n){},function(e,t,n){\"use strict\";n.r(t);var a=n(0),c=n.n(a),o=n(2),r=n.n(o);n(9),n(10),n(11);var i=function(){for(var e,t=new Date,n=(new Date).getFullYear(),a=1;a<8;a++)0===new Date(n,2,a).getDay()&&(e=a);for(var o,r=new Date(n,2,e+7),i=1;i<8;i++)0===new Date(n,2,i).getDay()&&(o=i);var u,g,T=new Date(n,10,o);(u=t.getTime()>r.getTime()&&t.getTime()<T.getTime()?t.getUTCHours()-4:t.getUTCHours()-5)<0&&(u+=24);var s,m,l=t.getUTCMinutes();l<10&&(l=\"0\".concat(l)),s=u>12?\"Current E\".concat(g?\"D\":\"S\",\"T \").concat(u-12,\":\").concat(l,\" PM\"):0===u?\"Current E\".concat(g?\"D\":\"S\",\"T 12:\").concat(l,\" AM\"):\"Current E\".concat(g?\"D\":\"S\",\"T \").concat(u,\":\").concat(l,\" AM\"),(m=t.getTime()>r.getTime()&&t.getTime()<T.getTime()?t.getUTCHours()-5:t.getUTCHours()-6)<0&&(m+=24);var C,w,D=t.getUTCMinutes();D<10&&(D=\"0\".concat(D)),C=m>12?\"Current C\".concat(g?\"D\":\"S\",\"T \").concat(m-12,\":\").concat(D,\" PM\"):0===m?\"Current C\".concat(g?\"D\":\"S\",\"T 12:\").concat(D,\" AM\"):\"Current C\".concat(g?\"D\":\"S\",\"T \").concat(m,\":\").concat(D,\" AM\"),t.getTime()>r.getTime()&&t.getTime()<T.getTime()?(w=t.getUTCHours()-7,g=!0):(w=t.getUTCHours()-8,g=!1),w<0&&(w+=24);var d,p=t.getUTCMinutes();return p<10&&(p=\"0\".concat(p)),d=w>12?\"Current P\".concat(g?\"D\":\"S\",\"T \").concat(w-12,\":\").concat(p,\" PM\"):0===w?\"Current P\".concat(g?\"D\":\"S\",\"T 12:\").concat(p,\" AM\"):\"Current P\".concat(g?\"D\":\"S\",\"T \").concat(w,\":\").concat(p,\" AM\"),c.a.createElement(\"div\",{className:\"App\"},c.a.createElement(\"header\",{className:\"App-header\"},c.a.createElement(\"p\",null,s),c.a.createElement(\"p\",null,C),c.a.createElement(\"p\",null,d)))};Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(c.a.createElement(i,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}],[[3,1,2]]]);","extractedComments":[]}